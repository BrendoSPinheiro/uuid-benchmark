'use strict'

const fs = require('fs')
const {Suite} = require('benchmark')
const numeral = require('numeral')

const suite = new Suite()

suite.cacheSizes = [16 ** 2, 16 ** 3, 16 ** 4]

require('./benchmarks/uuid')(suite)
require('./benchmarks/fast-uuid')(suite)
require('./benchmarks/uuid-random')(suite)
require('./benchmarks/sodium-uuid')(suite)
require('./benchmarks/hyperid')(suite)
require('./benchmarks/crypto.randomBytes')(suite)
require('./benchmarks/crypto.randomFillSync')(suite)
require('./benchmarks/crypto.randomFill')(suite)
require('./benchmarks/dev-random')(suite)

const readmePath = 'README.md'
const csvPath = 'results.csv'
let csv = ''
let readme = fs.readFileSync(readmePath)
const startMarker = '<!-- AUTOGENERATED - DO NOT EDIT - START -->\n'
const endMarker = '<!-- AUTOGENERATED - DO NOT EDIT - END -->\n'
const startIndex = readme.indexOf(startMarker)
const endIndex = readme.indexOf(endMarker) + endMarker.length
const postChunk = readme.slice(endIndex)
readme = readme.slice(0, startIndex)

suite
  .on('start', function () {
    readme += startMarker
    readme += '| Method | Leaky | Format | Re-use | Cache | Sync | Ops/sec | RME | Samples |\n'
    readme += '|--------|-------|--------|--------|-------|------|---------|-----|---------|\n'

    csv += '"Method","Leaky","Format","Re-use","Cache","Sync","Ops/sec","Deviation","Mean","MOE","RME","Samples","SEM","Variance"\n'
  })
  .on('cycle', function (event) {
    const t = event.target
    console.log(`${desc(t)} x ${numeral(t.hz).format('0,0')} ops/sec Â±${t.stats.rme.toFixed(2)}% (${t.stats.sample.length} runs sampled)`)
    readme += `| [${t.name}] ${t.postfix || ''} | ${leaky(t)} | ${t.format} | ${check(t.reuse)} | ${t.cacheSize || 'n/a'} | ${check(!t.defer)} | ${numeral(t.hz).format('0,0')} | Â±${t.stats.rme.toFixed(2)}% | ${t.stats.sample.length} |\n`
    csv += `"${fullName(t)}","${t.leaky ? 'Y' : 'N'}","${t.format}","${t.reuse ? 'Y' : 'N'}",${t.cacheSize || ''},"${t.defer ? 'N' : 'Y'}",${t.hz},${t.stats.deviation},${t.stats.mean},${t.stats.moe},${t.stats.rme},${t.stats.sample.length},${t.stats.sem},${t.stats.variance}\n`
  })
  .on('complete', function () {
    console.log('Fastest is ' + desc(this.filter('fastest')[0]))

    readme += endMarker
    readme += postChunk
    fs.writeFileSync(readmePath, readme)
    fs.writeFileSync(csvPath, csv)
  })
  .run()

function fullName (t) {
  return t.name + (t.postfix ? ' ' + t.postfix : '')
}

function desc (t) {
  return `${fullName(t)} (format: ${t.format}, re-use: ${!!t.reuse}, cache: ${t.cacheSize || 'n/a'}, sync: ${!t.defer})`
}

function leaky (t) {
  return t.leaky ? 'ðŸ’¦' : ''
}

function check (bool) {
  return bool ? 'âœ…' : ''
}
